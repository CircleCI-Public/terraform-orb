description: |
  Execute 'terraform destroy' on current state.

parameters:
  path:
    type: "string"
    description: "Path to the terraform module"
    default: "."
  var:
    type: "string"
    description: "Comma separated list of var to set, e.g. 'foo=bar,bas=foo'"
    default: ""
  var_file:
    type: "string"
    description: "Comma separated list of var file paths"
    default: ""
  workspace:
    type: "string"
    description: "Name of the terraform workspace"
    default: ""
  backend_config:
    type: "string"
    description: |
      "Comma separated list of backend configs to set, e.g. 'foo=bar'"
    default: ""
  backend_config_file:
    type: "string"
    description: "Path to a backend config file"
    default: ""
  cli_config_file:
    type: "string"
    description: "Path to terraform cli config file"
    default: ""

steps:
  - run:
      name: terraform destroy
      command: |
        # Check CLI config file
        if [[ -n "<< parameters.cli_config_file >>" ]]; then
            if [[ -f "<< parameters.cli_config_file >>" ]]; then
                export TF_CLI_CONFIG_FILE=<< parameters.cli_config_file >>
            else
                echo "Terraform cli config does not exist: \"<< parameters.cli_config_file >>\""
                exit 1
            fi
        fi
        # 'path' is a required parameter, save it as module_path

        readonly module_path="<< parameters.path >>"

        export path=$module_path


        if [[ ! -d "$module_path" ]]; then
          echo "Path does not exist: \"$module_path\""
          exit 1
        fi

        # Initialize terraform

        if [[ -n "<< parameters.backend_config_file >>" ]]; then
            for file in $(echo "<< parameters.backend_config_file >>" | tr ',' '\n'); do
                if [[ -f "$file" ]]; then
                    INIT_ARGS="$INIT_ARGS -backend-config=$file"
                elif [[ -f "$module_path/$file" ]]; then
                    INIT_ARGS="$INIT_ARGS -backend-config=$module_path/$file"
                else
                    echo "Backend config '$file' wasn't found" >&2
                    exit 1
                fi
            done
        fi


        if [[ -n "<< parameters.backend_config >>" ]]; then
            for config in $(echo "<< parameters.backend_config >>" | tr ',' '\n'); do
                INIT_ARGS="$INIT_ARGS -backend-config=$config"
            done
        fi


        export INIT_ARGS


        # Set workspace from parameter, allowing it to be overridden by TF_WORKSPACE.

        # If TF_WORKSPACE is set we don't want terraform init to use the value, in the case we are running new_workspace.sh this would cause an error

        readonly workspace_parameter="<< parameters.workspace >>"

        readonly workspace="${TF_WORKSPACE:-$workspace_parameter}"

        export workspace

        unset TF_WORKSPACE

        rm -rf .terraform

        terraform init -input=false -lock-timeout=300s -no-color $INIT_ARGS "$module_path"
        # Test for saving state locally vs a remote state backend storage
        if [[ $workspace_parameter != "" ]]; then
          echo "[INFO] Provisioning local workspace: $workspace"
          terraform workspace select -no-color "$workspace" "$module_path"
        else
          echo "[INFO] Remote State Backend Enabled"
        fi
        if [[ -n "<< parameters.var >>" ]]; then
            for var in $(echo "<< parameters.var >>" | tr ',' '\n'); do
                PLAN_ARGS="$PLAN_ARGS -var $var"
            done
        fi


        if [[ -n "<< parameters.var_file >>" ]]; then
            for file in $(echo "<< parameters.var_file >>" | tr ',' '\n'); do
                if [[ -f "$file" ]]; then
                    PLAN_ARGS="$PLAN_ARGS -var-file=$file"
                elif [[ -f "$module_path/$file" ]]; then
                    PLAN_ARGS="$PLAN_ARGS -var-file=$module_path/$file"
                else
                    echo "Var file '$file' wasn't found" >&2
                    exit 1
                fi
            done
        fi


        export PLAN_ARGS

        terraform destroy -input=false -no-color -auto-approve -lock-timeout=300s $PLAN_ARGS "$module_path"
