description: |
  Execute 'terraform destroy' on current state.

parameters:
  path:
    type: "string"
    description: "Path to the terraform module"
    default: "."
  vars:
    type: "string"
    description: "Comma separated list of vars to set, e.g. 'foo=bar,bas=foo'"
    default: ""
  var_file:
    type: "string"
    description: "Comma separated list of vars file paths"
    default: ""
  workspace:
    type: "string"
    description: "Name of the terraform workspace"
    default: "default"
  backend_config:
    type: "string"
    description: |
      "Comma separated list of backend configs to set, e.g. 'foo=bar'"
    default: ""
  backend_config_file:
    type: "string"
    description: "Path to a backend config file"
    default: ""

steps:
  - run:
      name: terraform destroy
      command: |
        # 'path' is a required parameter, save it as module_path
        readonly module_path="<< parameters.path >>"
        export path=$module_path

        if [[ ! -d "$module_path" ]]; then
          echo "Path does not exist: \"$module_path\""
          exit 1
        fi
        # the following is needed to process backend configs
        if [[ -n "<< parameters.backend_config_file >>" ]]; then
            for file in $(echo "<< parameters.backend_config_file >>" | tr ',' '\n'); do
                if [[ -f "$file" ]]; then
                    INIT_ARGS="$INIT_ARGS -backend-config=$file"
                elif [[ -f "$module_path/$file" ]]; then
                    INIT_ARGS="$INIT_ARGS -backend-config=$module_path/$file"
                else
                    echo "Backend config '$file' wasn't found" >&2
                    exit 1
                fi
            done
        fi
        if [[ -n "<< parameters.backend_config >>" ]]; then
            for config in $(echo "<< parameters.backend_config >>" | tr ',' '\n'); do
                INIT_ARGS="$INIT_ARGS -backend-config=$config"
            done
        fi
        export INIT_ARGS
        readonly workspace_parameter="<< parameters.workspace >>"
        readonly workspace="${TF_WORKSPACE:-$workspace_parameter}"
        export workspace
        unset TF_WORKSPACE
        terraform workspace select -no-color "$workspace"
        if [[ -n "<< parameters.vars >>" ]]; then
            for vars in $(echo "<< parameters.vars >>" | tr ',' '\n'); do
                PLAN_ARGS="$PLAN_ARGS -vars $vars"
            done
        fi
        if [[ -n "<< parameters.var_file >>" ]]; then
        for file in $(echo "<< parameters.var_file >>" | tr ',' '\n'); do
            if [[ -f "$file" ]]; then
                PLAN_ARGS="$PLAN_ARGS -vars-file=$file"
            elif [[ -f "$module_path/$file" ]]; then
                PLAN_ARGS="$PLAN_ARGS -vars-file=$module_path/$file"
            else
                echo "vars file '$file' wasn't found" >&2
                exit 1
            fi
        done
        fi
        export PLAN_ARGS
        terraform init -input=false -no-color $INIT_ARGS "$module_path"
        terraform workspace select -no-color "$workspace" "$module_path"
        terraform destroy -input=false -no-color -auto-approve $PLAN_ARGS
