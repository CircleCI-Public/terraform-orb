description: |
  Apply Terraform manifest

parameters:
  path:
    type: "string"
    description: "Path to the terraform module"
    default: "/src"
  vars:
    type: "string"
    description: "Comma separated list of vars to set, e.g. 'foo=bar,bas=foo'"
    default: ""
  vars_file:
    type: "string"
    description: "Comma separated list of vars file paths"
    default: ""
  workspace:
    type: "string"
    description: "Name of the terraform workspace"
    default: "default"
  backend_config:
    type: "string"
    description: |
      "Comma separated list of backend configs to set, e.g. 'foo=bar'"
    default: ""
  backend_config_file:
    type: "string"
    description: "Path to a backend config file"
    default: ""

steps:
  - run:
      name: terraform apply
      command: |
        # 'path' is a required parameter, save it as module_path
        readonly module_path="<< parameters.path >>"
        export path=$module_path

        if [[ ! -d "$module_path" ]]; then
          echo "Path does not exist: \"$module_path\""
          exit 1
        fi
        readonly workspace_parameter="<< parameters.workspace >>"
        readonly workspace="${TF_WORKSPACE:-$workspace_parameter}"
        export workspace
        unset TF_WORKSPACE
        terraform workspace select -no-color "$workspace"
        if [[ -n "<< parameters.var >>" ]]; then
            for var in $(echo "<< parameters.var >>" | tr ',' '\n'); do
                PLAN_ARGS="$PLAN_ARGS -var $var"
            done
        fi
        if [[ -n "<< parameters.var_file >>" ]]; then
        for file in $(echo "<< parameters.var_file >>" | tr ',' '\n'); do
            if [[ -f "$file" ]]; then
                PLAN_ARGS="$PLAN_ARGS -var-file=$file"
            elif [[ -f "$module_path/$file" ]]; then
                PLAN_ARGS="$PLAN_ARGS -var-file=$module_path/$file"
            else
                echo "Var file '$file' wasn't found" >&2
                exit 1
            fi
        done
        fi
        export PLAN_ARGS
        if [[ "<< parameters.auto_approve >>" == "true" ]];
          echo "Automatically applying plan"
          terraform apply -auto-approve $PLAN_ARGS
        then
          echo "Manual approval required"
        fi
